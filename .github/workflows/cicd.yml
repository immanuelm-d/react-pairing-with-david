# build the react solution and test
name: React CI/CD
on:
  push:
    branches:
      - main
      - trunk
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - trunk
# we need these permissions to deploy the react template to github pages
permissions:
  id-token: write
  pages: write
  contents: read
jobs:
  build:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      # When deploying to GitHub Pages for a project site, the base path
      # should be /<repo-name>/. We set VITE_BASE so the Vite build uses
      # the correct base URL. Enable MSW in the build with VITE_USE_MSW.
      VITE_BASE: "/${{ github.event.repository.name }}/"
      VITE_USE_MSW: "true"
      PAUSE_BEFORE_E2E_SECONDS: 15
      PAUSE_BEFORE_E2E: true # set to true to pause before running e2e tests against deployed pages
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: 🎁 Install dependencies
        run: npm ci
      - name: 🔎 Lint
        run: npm run lint
      - name: 🏗️ Build
        run: npm run build
      - name: 🧪 Test
        run: npm run test
      - name: 📣 Status Update
        run: echo "✅ npm ci, test and build completed" | tee -a $GITHUB_STEP_SUMMARY

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run e2e tests
        run: |
          npm run test:e2e
          echo "✅ e2e tests completed" | tee -a $GITHUB_STEP_SUMMARY

      # if you configure your repository to use GitHub Pages, 
      # you can deploy the build output to GitHub Pages.
      # Uncomment the following steps to enable GitHub Pages deployment

      # - name: upload pages artifact
      #   uses:  actions/upload-pages-artifact@v3
      #   with:
      #     path: ${{ github.workspace }}/dist/
      # - name: deploy pages artifact
      #   id: deploy-pages-artifact
      #   uses: actions/deploy-pages@v4
      # - name: show deployed url
      #   run: |
      #     # show deployed URL for github pages
      #     echo "📚 Deployed pages to ${{ steps.deploy-pages-artifact.outputs.page_url }}" | tee -a $GITHUB_STEP_SUMMARY

      # run e2e tests using playwright to test the deployment to github pages

      # - name: Run e2e tests PVT
      #   run: |
      #     echo "📣 PVT: Running e2e tests against deployed pages at ${{ steps.deploy-pages-artifact.outputs.page_url }}" | tee -a $GITHUB_STEP_SUMMARY
      #     if [ "${{ env.PAUSE_BEFORE_E2E }}" = "true" ]; then
      #       echo "⏳ Waiting for ${{ env.PAUSE_BEFORE_E2E_SECONDS }} seconds before running e2e tests" | tee -a $GITHUB_STEP_SUMMARY
      #       sleep ${{ env.PAUSE_BEFORE_E2E_SECONDS }}
      #     fi
      #     echo "🧪 Running PVT e2e tests" | tee -a $GITHUB_STEP_SUMMARY
      #     npm run test:e2e
      #     echo "✅ PVT e2e tests completed" | tee -a $GITHUB_STEP_SUMMARY
      #   env:
      #     BASE_URL: ${{ steps.deploy-pages-artifact.outputs.page_url }} # set the base URL for the PVT e2e tests

    # - name: Upload screenshots as artifact
    #   if: github.event_name == 'pull_request' || github.event_name == 'push'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: screenshots
    #     path: test-results/screenshots/*.png
    #     if-no-files-found: ignore
